package data;

import java.util.ArrayList;
import java.util.Random;

import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.GL11;

import Helpers.Artist;
import Helpers.Textures;
import static Helpers.Artist.*;

public class Driver {
	
	private ArrayList<Tile> tiles = new ArrayList<>();
	static final int TILE_SIZE = 20;
	static final int WINDOW_LENGTH = Artist.HEIGHT;	//Same in Artist
	static final int WINDOW_WIDTH = Artist.WIDTH;	//Same in Artist
	int halfOfBoardLength = ((WINDOW_LENGTH/TILE_SIZE)/2) * TILE_SIZE;
	int halfOfBoardWidth = ((WINDOW_WIDTH/TILE_SIZE)/2) * TILE_SIZE;
	final int OFFSET = 1;	//This is used to make the tiles and the ants look nicely dispersed.
	final int SPEED = 20;	//The amount of distance the ant goes each step. Basically the TILE_SIZE
	static int stepsTaken = 0;
	static Ant ant;
	private ArrayList<Ant> ants = new ArrayList<>();
	private int generation = 0;
	static int numTiles = (WINDOW_LENGTH/TILE_SIZE)*(WINDOW_WIDTH/TILE_SIZE);
	static boolean[] visited = new boolean[numTiles];
	int numOfAntsNeeded = 5;
	int maxNumOfSteps = 1000;
	float averageFitness = 0;
	static int visitedTiles = 1;	//Number of tiles touched so far.
	
	Textures t = new Textures();

	public Driver()
	{
		BeginSession();
		t.load();
		
		/*try {
			PixelMachine p = new PixelMachine();
		} catch (IOException e) {
			e.printStackTrace();
		}*/
		
		genTiles();
		genAnts();
				
		boolean isDone = false;
		
		int antIndex = 0;
		ant = ants.get(antIndex);
		visitCenterTile();
		
		while (!Display.isCloseRequested() && isDone == false)
		{
			//Keeps images from staying on screen.
			GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
		
			for (int i = 0; i < tiles.size(); i++)
			{
				tiles.get(i).update();
			}
			
			checkTile(ant);
		
			ant.update();
			stepsTaken++;
			
			if (stepsTaken == maxNumOfSteps || ant.isOffBoard() == true)
			{			
				//Last ant in batch to check.
				if (antIndex == ants.size()-1)
				{
					if (generation == 10)
					{
						isDone = true;
					}
					generation++;
					ant.setScore(getVisitedTiles());
					averageFitness += ant.getFitness();
					System.out.println("GENERATION: " + generation);
					System.out.println("AVERGAE FITNESS: " + averageFitness/ants.size());
					generateNextAnts();
					averageFitness = 0;
					stepsTaken = 0;
					restartTiles();
					antIndex = 0;
					ant = ants.get(antIndex);
					visitCenterTile();
				}
				else
				{
					ant.setScore(getVisitedTiles());
					averageFitness += ant.getFitness();
					antIndex++;
					ant = ants.get(antIndex);
					stepsTaken = 0;
					restartTiles();
					visitCenterTile();
				}
			}
		
			Display.update();
			Display.sync(100);
		}
		
		Display.destroy();
 	}
	
	private void generateNextAnts()
	{
		//Selecting the best from the current generation.
		ArrayList<Ant> tmp = new ArrayList<>();
		averageFitness = averageFitness/ants.size();
		
		for (Ant a : ants)
		{
			a.setX(halfOfBoardLength + OFFSET);	//Sets the starting location back to the center.
			a.setY(halfOfBoardWidth + OFFSET); //
			if (a.getFitness() > averageFitness)
			{
				tmp.add(a);
			}
		}
		
		System.out.println("LOST: " + (ants.size() - tmp.size()));
		
		numOfAntsNeeded = ants.size() - tmp.size();	//Figures out how many new ants we need to make.
		ants = tmp;
		
		crossOver();
		
		//Adding new ones to fill the places of the old ones.
		genAnts();
		System.out.println("NEW SIZE: " + ants.size());
		
		System.out.println("================");
		for (int i = 0; i < ants.size(); i ++)
		{
			System.out.println(ants.get(i).getFitness());
		}
	}
	
	
	private void visitCenterTile()
	{
		for (int i = 0; i < tiles.size(); i++)
		{
			if ((tiles.get(i).getX() == halfOfBoardLength+OFFSET) && (tiles.get(i).getY() == halfOfBoardWidth+OFFSET))
			{
				System.out.println("FOUND");
				tiles.get(i).visit();
			}
		}
	}
	
	
	private void crossOver()
	{
		Random rgen = new Random();
		ArrayList<Ant> tmp = new ArrayList<>();
		int slicer = 0;
		
		int offset = ants.size() % 2; //Stops it from trying to cross with an odd amount of ants.
		for (int i = 0; i < ants.size() - offset; i++)
		{
			slicer = rgen.nextInt(6);
			if (i == 0)
			{
				
			}
			else if (i == ants.size() - offset)
			{
				
			}
			else
			{
				
			}
		}
	}
	
	
	//Makes the tiles all white again.
	private void restartTiles()
	{
		visited = new boolean[numTiles];
		for (int i = 0; i < tiles.size(); i++)
		{
			tiles.get(i).changeColor("white");
		}
	}
	
	
	private void checkTile(Ant ant)
	{
		for (int i = 0; i < tiles.size(); i++)
		{
			if (tiles.get(i).getX() == ant.getX() && tiles.get(i).getY() == ant.getY())
			{
				String color = tiles.get(i).getColor();
				int index = ant.onTile(color);
				String actionName = ant.findAction(color);
				ant.doAction(actionName);
				tiles.get(i).changeColor(ant.getOutColor(index));
				visited[i] = true;
				break;
			}
		}
	}
	
	
	private static float getVisitedTiles()
	{
		int count = 0;
		for (int i = 0; i < visited.length; i++)
		{
			if (visited[i] == true)
			{
				count++;
			}
		}
		/*System.out.println("========================");
		System.out.println(count + " tiles visited.");
		System.out.println(stepsTaken + " steps taken.");
		System.out.println((float)count/(float)numTiles * 100 + "% of board explored");
		getMoveList();
		System.out.println("========================");*/
		return((float)count/(float)numTiles * 100);
	}
	
	private static void getMoveList()
	{
		System.out.println();
		for (int i = 0; i < ant.moves.length; i ++)
		{
			System.out.print(ant.colorIn[i] + ", ");
		}
		System.out.println();
		for (int i = 0; i < ant.moves.length; i ++)
		{
			System.out.print(ant.moves[i] + ", ");
		}
		System.out.println();
		for (int i = 0; i < ant.moves.length; i ++)
		{
			System.out.print(ant.colorOut[i] + ", ");
		}
		System.out.println();
	}
	
	
	
	
	
	
	
								//######## Startup Methods ########\\
	
	private void genAnts()
	{
		int antsToMake = numOfAntsNeeded;
		
		while (antsToMake > 0)
		{
			ArrayList<String> colorList = new ArrayList<>();
			colorList.add("white");
			colorList.add("black");
			colorList.add("blue");
			colorList.add("green");
			colorList.add("yellow");
			colorList.add("red");
			
			ArrayList<String> colorOutList = new ArrayList<>();
			colorOutList.add("white");
			colorOutList.add("black");
			colorOutList.add("blue");
			colorOutList.add("green");
			colorOutList.add("yellow");
			colorOutList.add("red");
			
			ArrayList<String> moveList = new ArrayList<>();
			moveList.add("turn clockwise");
			moveList.add("turn counter clockwise");
			moveList.add("move right");
			moveList.add("move backward");
			moveList.add("move left");
			moveList.add("move forward");
			
			String[] colorIn = new String[colorList.size()];
			String[] moves = new String[moveList.size()];
			String[] colorOut = new String[colorList.size()];
			
			Random rgen = new Random();
			while(colorList.size() > 0)
			{
				int randomInColor = rgen.nextInt(colorList.size());
				int randomOutColor = rgen.nextInt(colorOutList.size());
				int randomMove = rgen.nextInt(moveList.size());			
				
				colorIn[colorList.size()-1] = colorList.get(randomInColor);
				moves[moveList.size()-1] = moveList.get(randomMove);
				colorOut[colorOutList.size()-1] = colorOutList.get(randomOutColor);
				
				colorList.remove(randomInColor);
				colorOutList.remove(randomOutColor);
				moveList.remove(randomMove);
			}
			
			Ant ant = new Ant(halfOfBoardLength+OFFSET,halfOfBoardWidth+OFFSET,TILE_SIZE,TILE_SIZE,Artist.quickLoad("ant"),"north", SPEED,colorIn, moves, colorOut);
			ants.add(ant);
			
			antsToMake--;
		}
		
		//Black & Blue
//		String[] colorIn = {"white","black","blue","green","yellow","red"};
//		String[] moves= {"turn clockwise","turn counter clockwise","move right","move backward","move left","move forward"};
//		String[] colorOut = {"red","white","black","white","black","blue"};
		
		//Long Green Symmetry
//		String[] colorIn = {"red","blue","green","white","black","yellow"};
//		String[] moves= {"turn clockwise","turn counter clockwise","move right","move backward","move left","move backward"};
//		String[] colorOut = {"green","yellow","blue","green","white","green"};
		
		//Blue/Yellow Diamond
//    	String[] colorIn = {"red","blue","green","white","black","yellow"};
//		String[] moves= {"turn clockwise","turn counter clockwise","move left","move backward","move left","move forward"};
//		String[] colorOut = {"green","red","blue","yellow","white","green"};
		
		//Blue/Black Line
//		String[] colorIn = {"red","blue","green","white","black","yellow"};
//		String[] moves= {"turn counter clockwise","turn clockwise","move right","move backward","move left","move forward"};
//		String[] colorOut = {"red","green","blue","black","green","white"};
		
		//Nice Colors, but no real pattern
//		String[] colorIn = {"red","blue","green","white","black","yellow"};
//		String[] moves= {"turn counter clockwise","turn clockwise","move right","move backward","move left","move forward"};
//		String[] colorOut = {"black","yellow","red","blue","green","green"};

		//Square..?
//		String[] colorIn = {"red","green","yellow","black","blue","white"};
//		String[] moves= {"turn clockwise","turn counter clockwise","move backward","move forward","move left","move right"};
//		String[] colorOut = {"black","yellow","white","red","green","blue"};
	}
	
	public static void addOneTile()
	{
		visitedTiles++;
	}
	
	private void genTiles()
	{
		for (int x = 0; x < WINDOW_LENGTH/TILE_SIZE; x++)
		{
			for (int y= 0; y < WINDOW_WIDTH/TILE_SIZE; y++)
			{
				Tile t = new Tile(x*TILE_SIZE+OFFSET,y*TILE_SIZE+OFFSET,TILE_SIZE,TILE_SIZE,Artist.quickLoad("whiteTile"));
				tiles.add(t);
			}
		}
	}
	public static void main(String[] args)
	{
		new Driver();
	}
}